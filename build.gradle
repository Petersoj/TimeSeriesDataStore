buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        // For Maven and Maven Central support
        classpath group: 'com.bmuschko', name: 'gradle-nexus-plugin', version: '2.3.1'
    }
}


plugins {
    id 'java'

    // For Maven and Maven Central support
    id 'maven-publish'
    id 'com.bmuschko.nexus' version '2.3.1'
    id 'io.codearte.nexus-staging' version '0.11.0'

    // For code coverage reports
    id 'jacoco'
}

group 'net.jacobpeterson'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // Logging framework
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'

    // Google Guava for a variety of useful methods
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'

    // Java SQL ORM: jOOQ - https://www.jooq.org
    implementation group: 'org.jooq', name: 'jooq', version: '3.15.3'

    // Unit test dependencies
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.6'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.8.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

javadoc {
    // Explicitly define source version
    options.addStringOption('source', '8')
    // Used to suppress Javadoc linting warnings
    options.addStringOption('Xdoclint:none', '-quiet')
    // Explicitly define Charset for Javadocs
    options.addStringOption('charset', 'UTF-8')
    // Add Java SE 8 link
    options.addStringOption('link', 'https://docs.oracle.com/javase/8/docs/api/')
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
jacocoTestReport.dependsOn check

//
// START Publishing
//
modifyPom {
    project {
        name = 'TimeSeriesDataStore'
        description = 'A Java API to store and iterate over time series data retrieved from a data feed and stored in a database.'
        url = 'https://github.com/Petersoj/TimeSeriesDataStore'
        inceptionYear = '2021'

        licenses {
            license {
                name = 'MIT License'
                url = 'https://opensource.org/licenses/MIT'
            }
        }

        developers {
            developer {
                id = 'Petersoj'
                name = 'Jacob Peterson'
            }
        }

        scm {
            url = "https://github.com/Petersoj/TimeSeriesDataStore.git"
            connection = "scm:git:https://github.com/Petersoj/TimeSeriesDataStore.git"
            developerConnection = "scm:git:git@github.com/Petersoj/TimeSeriesDataStore.git"
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
    packageGroup = "net.jacobpeterson"
}
//
// END Publishing
//
